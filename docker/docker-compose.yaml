version: '3'

services:
  zookeeper:
    container_name: myZookeeper
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - exam-net

  kafka:
    container_name: myKafka
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - exam-net


  exam-connect:
    container_name: exam-connect
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
      - "5556:5556"
    command: sh -c "
      echo 'waiting 10s' &&
      sleep 10 &&
      /etc/confluent/docker/run"
    environment:
      CONNECT_GROUP_ID: 'exam-connect'
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_PORT: 8083
      CONNECT_CONFIG_STORAGE_TOPIC: 'file-source-config'
      CONNECT_OFFSET_STORAGE_TOPIC: 'file-source-offset'
      CONNECT_STATUS_STORAGE_TOPIC: 'file-source-status'
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      #      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      #      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      #      CONNECT_VALUE_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      #      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schemaRegistry:8081'
      #      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schemaRegistry:8081'
      CONNECT_REST_ADVERTISED_HOST_NAME: exam-connect
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      KAFKA_JMX_OPTS: "-javaagent:/opt/jmx_prometheus_javaagent.jar=5556:/opt/config.yml -Dcom.sun.management.jmxremote.authenticate=false"
      TZ: 'Asia/Seoul'
      JAVA_OPTS: "-Duser.timezone=Asia/Seoul"
    #      CONNECTOR_CONFIG_PATH: "/etc/kafka-connect/file-source.json"
    volumes:
      - ./data:/data
      - ./config.yml:/opt/config.yml
    networks:
      - exam-net

#  cdc-1:
#    container_name: cdc-1
#    build:
#      context: .
#      dockerfile: Dockerfile
#    ports:
#      - "8083:8083"
#      - "5556:5556"
#    command: sh -c "
#      echo 'waiting 10s' &&
#      sleep 10 &&
#      /etc/confluent/docker/run"
#    environment:
#      CONNECT_GROUP_ID: 'cdc-outbox'
#      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
#      CONNECT_REST_PORT: 8083
#      CONNECT_CONFIG_STORAGE_TOPIC: 'cdc-outbox-config'
#      CONNECT_OFFSET_STORAGE_TOPIC: 'cdc-outbox-offset'
#      CONNECT_STATUS_STORAGE_TOPIC: 'cdc-outbox-status'
#      CONNECT_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
#      CONNECT_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
#      CONNECT_REST_ADVERTISED_HOST_NAME: cdc-1
#      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
#      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
#      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
##      KAFKA_OPTS: "-javaagent:/opt/jmx_prometheus_javaagent.jar=5556:/opt/config.yml -Dcom.sun.management.jmxremote.authenticate=false"
#      KAFKA_JMX_OPTS: "-javaagent:/opt/jmx_prometheus_javaagent.jar=5556:/opt/config.yml -Dcom.sun.management.jmxremote.authenticate=false"
#    volumes:
#      - ./config.yml:/opt/config.yml
#    depends_on:
#      - exam-db
#      - zookeeper
#      - kafka
#    networks:
#      - exam-net
#
#  cdc-2:
#    container_name: cdc-2
#    build:
#      context: .
#      dockerfile: Dockerfile
#    ports:
#      - "8084:8083"
#    command: sh -c "
#      echo 'waiting 10s' &&
#      sleep 10 &&
#      /etc/confluent/docker/run"
#    environment:
#      CONNECT_GROUP_ID: 'cdc-outbox'
#      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
#      CONNECT_REST_PORT: 8083
#      CONNECT_CONFIG_STORAGE_TOPIC: 'cdc-outbox-config'
#      CONNECT_OFFSET_STORAGE_TOPIC: 'cdc-outbox-offset'
#      CONNECT_STATUS_STORAGE_TOPIC: 'cdc-outbox-status'
#      CONNECT_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
#      CONNECT_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
#      CONNECT_REST_ADVERTISED_HOST_NAME: cdc-2
#      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
#      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
#      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
#    depends_on:
#      - exam-db
#      - zookeeper
#      - kafka
#    networks:
#      - exam-net
#
#  exam-db:
#    container_name: exam-db
#    image: mysql:8
#    ports:
#      - "3306:3306"
#    volumes:
#      - ./mysql.cnf:/etc/mysql/conf.d/custom.cnf
#      - ./init-sql/:/docker-entrypoint-initdb.d/
#    environment:
#      MYSQL_ROOT_PASSWORD: root
#      MYSQL_USER: mysqluser
#      MYSQL_PASSWORD: mysqlpw
#    networks:
#      - exam-net

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - exam-net

  # id : admin, pw : admin
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - exam-net

networks:
  exam-net: